<Layout>
    <Headline1>Paperstack</Headline1>

    <Paragraph>
        This is a Paperstack website. The <InlineCode>.stencil</InlineCode> files in <InlineCode>Pages</InlineCode> have been compiled into <InlineCode>.html</InlineCode> files in the <InlineCode>Output</InlineCode> directory.
    </Paragraph>

    <Paragraph class="mt-4">
        The <InlineCode>Pages</InlineCode> directory can also contain nested folders. This project has a file called <InlineCode>Pages/Nested/ADeeplyNestedPage.stencil</InlineCode>. It's compiled to <InlineCode>Output/nested/a-deeply-nested-page/index.html</InlineCode>.
    </Paragraph>

    <Paragraph class="mt-4">
        You can view that page <Link href="/nested/a-deeply-nested-page">here</Link>. 
    </Paragraph>

    <Paragraph class="mt-4">
        Additionally you can loop over pages to dynamically render a list of links:
    </Paragraph>

    <List class="mt-4">
        @each(page in $pages.$pages)
            @if(page.title)
                <ListItem>
                    <Link href="{{ page.path }}">
                        {{ page.title }}
                    </Link>
                </ListItem>
            @endif
        @endeach
    </List>

    <Headline2>Components</Headline2>

    <Paragraph>
        If you open one of the files in the <InlineCode>Pages</InlineCode> directory you'll see something that looks like HTML. This is Stencil, the templating language used in Paperstack.
    </Paragraph>

    <Paragraph class="mt-4">
        Stencil is based on components instead of partials, blocks or includes in other templating languages. Stencil components are similar to components in JavaScript frameworks like Vue or React with on caveat. Components are static and doesn't have state or reactivity. You can distinguish components from regular HTML because components has uppercase names. 
    </Paragraph>

    <Paragraph class="mt-4">
        This project already has a few components. You can find them in the <InlineCode>Components</InlineCode> directory. In Stencil you don't need to import components anywhere. If a component is defined in the <InlineCode>Components</InlineCode> directory it's available in all other components and pages. This means a component name is unique in a project. You can't have both a <InlineCode>Components/Dark/Button.stencil</InlineCode> component and a <InlineCode>Components/Light/Button.stencil</InlineCode> component.
    </Paragraph>

    <Paragraph class="mt-4">
        Some common use cases for components are layouts or re-usable UI elements like buttons or form elements.
    </Paragraph>    

    <Paragraph class="mt-4">
        Components has a number of advanced features that make them easier to compose together:
    </Paragraph>

    <List class="mt-4">
        <ListItem>Components can be rendered dynamically using <InlineCode>Component</InlineCode></ListItem>
        <ListItem>Components can be used recursively</ListItem>
        <ListItem>All properties of a record can be bound as attributes</ListItem>
    </List>

    <Headline2>Assets</Headline2>

    <Paragraph>
        The <InlineCode>Assets</InlineCode> directory contains all static assets you might need. All files in this directory will be copied into the <InlineCode>Output</InlineCode> folder when you build the site.
    </Paragraph>

    <Headline2>CSS</Headline2>

    <Paragraph>
        At the moment Paperstack doesn't have a built-in solution for managing CSS. You are free to add any <InlineCode>.css</InlineCode> files to the <InlineCode>Assets</InlineCode> directory.
    </Paragraph>

    <Paragraph class="mt-4">
        By default this project uses <Link href="https://tailwindcss.com/" target="_blank">Tailwind</Link> via a CDN.
    </Paragraph>

    <Headline2>JavaScript</Headline2>

    <Paragraph>
        As with CSS, Paperstack doesn't have a built-in way to process JS files. You are free to add any <InlineCode>.js</InlineCode> files to the <InlineCode>Assets</InlineCode> directory.
    </Paragraph>

    <Paragraph class="mt-4">
        By default this project uses <Link href="https://alpinejs.dev/" target="_blank">Alpine.js</Link> via a CDN.
    </Paragraph>

    <Paragraph class="mt-4" x-data="{ count: 0 }">
        Click this 
        <Button @click="count++">Button</Button> 
        to see it in action: <InlineCode class="ml-2" x-text="count"/>
    </Paragraph>

    <Headline2>Documentation</Headline2>

    <Paragraph>
        For now the documentation can be found in the <Link href="https://github.com/paperstackink/paperstack#paperstack" target="_blank">GitHub repository</Link>.
    </Paragraph>
</Layout>